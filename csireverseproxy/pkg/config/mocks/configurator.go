// Code generated by MockGen. DO NOT EDIT.
// Source: config.go
//
// Generated by this command:
//
//	mockgen -source=config.go -destination=mocks/configurator.go
//

// Package mock_config is a generated GoMock package.
package mock_config

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConfigurator is a mock of Configurator interface.
type MockConfigurator struct {
	ctrl     *gomock.Controller
	recorder *MockConfiguratorMockRecorder
	isgomock struct{}
}

// MockConfiguratorMockRecorder is the mock recorder for MockConfigurator.
type MockConfiguratorMockRecorder struct {
	mock *MockConfigurator
}

// NewMockConfigurator creates a new mock instance.
func NewMockConfigurator(ctrl *gomock.Controller) *MockConfigurator {
	mock := &MockConfigurator{ctrl: ctrl}
	mock.recorder = &MockConfiguratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurator) EXPECT() *MockConfiguratorMockRecorder {
	return m.recorder
}

// AddConfigPath mocks base method.
func (m *MockConfigurator) AddConfigPath(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddConfigPath", arg0)
}

// AddConfigPath indicates an expected call of AddConfigPath.
func (mr *MockConfiguratorMockRecorder) AddConfigPath(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConfigPath", reflect.TypeOf((*MockConfigurator)(nil).AddConfigPath), arg0)
}

// GetString mocks base method.
func (m *MockConfigurator) GetString(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetString indicates an expected call of GetString.
func (mr *MockConfiguratorMockRecorder) GetString(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockConfigurator)(nil).GetString), arg0)
}

// ReadInConfig mocks base method.
func (m *MockConfigurator) ReadInConfig() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadInConfig")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadInConfig indicates an expected call of ReadInConfig.
func (mr *MockConfiguratorMockRecorder) ReadInConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInConfig", reflect.TypeOf((*MockConfigurator)(nil).ReadInConfig))
}

// SetConfigName mocks base method.
func (m *MockConfigurator) SetConfigName(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfigName", arg0)
}

// SetConfigName indicates an expected call of SetConfigName.
func (mr *MockConfiguratorMockRecorder) SetConfigName(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigName", reflect.TypeOf((*MockConfigurator)(nil).SetConfigName), arg0)
}

// SetConfigType mocks base method.
func (m *MockConfigurator) SetConfigType(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfigType", arg0)
}

// SetConfigType indicates an expected call of SetConfigType.
func (mr *MockConfiguratorMockRecorder) SetConfigType(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigType", reflect.TypeOf((*MockConfigurator)(nil).SetConfigType), arg0)
}
