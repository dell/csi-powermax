/*
 *
 * Copyright Â© 2021-2024 Dell Inc. or its subsidiaries. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: config.go
//
// Generated by this command:
//
//	mockgen -source=config.go -destination=mocks/config-manager.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mock_config

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConfigManager is a mock of ConfigManager interface.
type MockConfigManager struct {
	ctrl     *gomock.Controller
	recorder *MockConfigManagerMockRecorder
	isgomock struct{}
}

// MockConfigManagerMockRecorder is the mock recorder for MockConfigManager.
type MockConfigManagerMockRecorder struct {
	mock *MockConfigManager
}

// NewMockConfigManager creates a new mock instance.
func NewMockConfigManager(ctrl *gomock.Controller) *MockConfigManager {
	mock := &MockConfigManager{ctrl: ctrl}
	mock.recorder = &MockConfigManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigManager) EXPECT() *MockConfigManagerMockRecorder {
	return m.recorder
}

// AddConfigPath mocks base method.
func (m *MockConfigManager) AddConfigPath(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddConfigPath", arg0)
}

// AddConfigPath indicates an expected call of AddConfigPath.
func (mr *MockConfigManagerMockRecorder) AddConfigPath(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConfigPath", reflect.TypeOf((*MockConfigManager)(nil).AddConfigPath), arg0)
}

// GetString mocks base method.
func (m *MockConfigManager) GetString(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetString indicates an expected call of GetString.
func (mr *MockConfigManagerMockRecorder) GetString(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockConfigManager)(nil).GetString), arg0)
}

// ReadInConfig mocks base method.
func (m *MockConfigManager) ReadInConfig() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadInConfig")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadInConfig indicates an expected call of ReadInConfig.
func (mr *MockConfigManagerMockRecorder) ReadInConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInConfig", reflect.TypeOf((*MockConfigManager)(nil).ReadInConfig))
}

// SetConfigName mocks base method.
func (m *MockConfigManager) SetConfigName(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfigName", arg0)
}

// SetConfigName indicates an expected call of SetConfigName.
func (mr *MockConfigManagerMockRecorder) SetConfigName(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigName", reflect.TypeOf((*MockConfigManager)(nil).SetConfigName), arg0)
}

// SetConfigType mocks base method.
func (m *MockConfigManager) SetConfigType(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConfigType", arg0)
}

// SetConfigType indicates an expected call of SetConfigType.
func (mr *MockConfigManagerMockRecorder) SetConfigType(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigType", reflect.TypeOf((*MockConfigManager)(nil).SetConfigType), arg0)
}
