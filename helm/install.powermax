#/bin/bash

NS="powermax"

# Verify the kubernetes installation has the feature gates needed.
sh ./verify.kubernetes
rc=$?
if [ $rc -ne 0 ] ; 
	then echo "*******************************************************************************"
             echo "Warning: Kubernetes --feature-gates not correctly configured... it may not work"
	     echo "*******************************************************************************"
             sleep 5
fi
# Make sure the powermax-creds has already been established
kubectl get secrets -n "$NS" | grep powermax-creds --quiet
if [ $? -ne 0 ];
    then echo "*** YOU MUST PROVIDE Unisphere credentials in a Kubernetes secret- see secret.yaml template ***"
    exit 2
fi

# Check if powermax-certs exists. If not, then create it
kubectl get secrets -n "$NS" | grep powermax-certs --quiet
if [ $? -ne 0 ];
    then echo "*** Couldn't find powermax-certs. Creating an empty secret. Delete it and re-create it if you want to validate unisphere certificates ***"
    kubectl create -f ./emptysecret.yaml
fi
# Check for required CustomResourceDefinitions
kubectl get customresourcedefinitions | grep csidrivers --quiet
if [ $? -ne 0 ];
    then echo "installing csidriver CRD"; kubectl create -f csidriver.yaml
fi
kubectl get customresourcedefinitions | grep nodeinfo --quiet
if [ $? -ne 0 ];
    then echo "installing nodeinfo CRD"; kubectl create -f nodeinfo.yaml
fi
helm install --values myvalues.yaml --name powermax --namespace "$NS" ./csi-powermax
sleep 10
kubectl get pods --namespace "$NS"
sleep 5
kubectl get pods --namespace "$NS"
sleep 5
kubectl get pods --namespace "$NS"
echo "CSIDrivers:"
kubectl get csidrivers
echo "CSINodeInfos:"
kubectl get csinodeinfos
echo "StorageClasses:"
kubectl get storageclass

