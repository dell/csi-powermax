#!/bin/bash
# define the namespace for the driver
if [ -z ${CSI_DRIVER_NAMESPACE+x} ]; then
        echo "CSI_DRIVER_NAMESPACE is unset"
        NS="powermax"
else
        NS=${CSI_DRIVER_NAMESPACE}
        if [ "$NS" == "" ]; then
                echo "CSI_DRIVER_NAMESPACE is set to empty. Defaulting to 'powermax'"
                NS="powermax"
        fi
fi
echo "Namespace for the driver installation: $NS"

source common.bash
echo "Running Kubernetes Server Version $kMajorVersion.$kMinorVersion"

if [ "$1" != "--no-verify" ]; then
	# Verify the kubernetes installation has the iscsi software, feature gates needed.
	bash verify.kubernetes
	rc=$?
	if [ $rc -ne 0 ] ; 
		then echo "****************************************************************"
    	         echo " Kubernetes validation had warnings... will proceed in 5 seconds"
	    	 echo "****************************************************************"
            	 sleep 5
	fi
fi
# Make sure the powermax-creds has already been established
kubectl get secrets -n "$NS" | grep powermax-creds --quiet
if [ $? -ne 0 ];
    then echo "*** YOU MUST PROVIDE Unisphere credentials in a Kubernetes secret- see secret.yaml template ***"
    exit 2
fi

kubectl get secrets -n "$NS" | grep powermax-certs --quiet
if [ $? -ne 0 ];
    then echo "*** Couldn't find powermax-certs. Create powermax-certs if you want to validate unisphere certificates ***"
fi

kubectl get customresourcedefinitions | grep volumesnapshotclasses --quiet
if [ $? -ne 0 ]; then
	echo "Installing volumesnapshotclass CRD"
	kubectl create -f volumesnapshotclasscrd.yaml
fi

echo helm install --values myvalues.yaml --values csi-powermax/k8s-${kMajorVersion}.${kMinorVersion}-values.yaml --namespace "$NS" powermax ./csi-powermax
helm install --values myvalues.yaml --values csi-powermax/k8s-${kMajorVersion}.${kMinorVersion}-values.yaml --namespace "$NS" powermax ./csi-powermax
waitOnRunning

echo "CSIDrivers:"
kubectl get csidrivers
echo "CSINode:"
kubectl get csinodes
echo "StorageClasses:"
kubectl get storageclass
echo "SnapshotClasses:"
kubectl get volumesnapshotclass
