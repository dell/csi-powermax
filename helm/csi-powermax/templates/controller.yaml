apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-controller
  namespace: {{ .Release.Namespace }}
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  {{- if eq .Values.customDriverName.enabled true}}
  name: {{ printf "%s-%s-controller" .Release.Namespace .Values.customDriverName.value }}
  {{- else }}
  name: {{ .Release.Name }}-controller
  {{- end }}
rules:
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "watch", "list", "delete", "update", "create"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete", "update", "patch" ]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims/status"]
    verbs: ["update", "patch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update", "patch" ]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments/status"]
    verbs: ["patch"]
  - apiGroups: ["csi.storage.k8s.io"]
    resources: ["csinodeinfos"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
# below for snapshotter
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["get", "list", "watch", "update", "create", "delete"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents/status"]
    verbs: ["update"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots", "volumesnapshots/status"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create", "list", "watch", "delete"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  {{- if eq .Values.customDriverName.enabled true}}
  name: {{ printf "%s-%s-controller" .Release.Namespace .Values.customDriverName.value }}
  {{- else }}
  name: {{ .Release.Name }}-controller
  {{- end }}
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Name }}-controller
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  {{- if eq .Values.customDriverName.enabled true}}
  name: {{ printf "%s-%s-controller" .Release.Namespace .Values.customDriverName.value }}
  {{- else }}
  name: {{ .Release.Name }}-controller
  {{- end }}
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-controller
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ required "Must provide the number of controller instances to create." .Values.controllerCount }}
  selector:
    matchLabels:
      name: {{ .Release.Name }}-controller
  template:
    metadata:
      labels:
        name: {{ .Release.Name }}-controller
    spec:
      {{ if .Values.controller.nodeSelector }}
      nodeSelector:
      {{- toYaml .Values.controller.nodeSelector | nindent 8 }}
      {{ end }}
      {{ if .Values.controller.tolerations }}
      tolerations:
      {{- toYaml .Values.controller.tolerations | nindent 6 }}
      {{ end }}
      serviceAccountName: {{ .Release.Name }}-controller
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: name
                operator: In
                values:
                - {{ .Release.Name }}-controller
            topologyKey: kubernetes.io/hostname
      containers:
        - name: attacher
          image: {{ required "Must provide the CSI attacher container image." .Values.images.attacher }}
          args:
            - "--csi-address=$(ADDRESS)"
            - "--v=5"
            - "--timeout=180s"
            - "--worker-threads=6"
            - "--leader-election"
          env:
            - name: ADDRESS
              value: /var/run/csi/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/run/csi
        - name: provisioner
          image: {{ required "Must provide the CSI provisioner container image." .Values.images.provisioner }}
          args:
            - "--csi-address=$(ADDRESS)"
            - "--volume-name-prefix={{ required "Must provide a Volume Name Prefix." .Values.volumeNamePrefix }}"
            - "--volume-name-uuid-length=10"
            - "--timeout=180s"
            - "--worker-threads=6"
            - "--v=5"
            - "--default-fstype={{ .Values.defaultFsType | default "ext4" }}"
            - "--leader-election"
          env:
            - name: ADDRESS
              value: /var/run/csi/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/run/csi
        - name: snapshotter
          image: {{ required "Must provide the CSI snapshotter container image." .Values.images.snapshotter }}
          args:
            - "--csi-address=$(ADDRESS)"
            - "--v=5"
            - "--snapshot-name-prefix={{ required "Must privided a Snapshot Name Prefix" .Values.snapNamePrefix }}"
            - "--snapshot-name-uuid-length=10"
            - "--timeout=180s"
            - "--leader-election"
          env:
            - name: ADDRESS
              value: /var/run/csi/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/run/csi
        - name: resizer
          image: {{ required "Must provide the CSI resizer container image." .Values.images.resizer }}
          args:
            - "--csi-address=$(ADDRESS)"
            - "--timeout=180s"
            - "--v=5"
            - "--leader-election"
          env:
            - name: ADDRESS
              value: /var/run/csi/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/run/csi
        - name: driver
          image: {{ required "Must provide the PowerMax driver container image." .Values.images.driver }}
          imagePullPolicy: Always
          command: [ "/csi-powermax.sh" ]
          args:
            - "--leader-election"
          env:
            - name: X_CSI_POWERMAX_DRIVER_NAME
              {{- if eq .Values.customDriverName.enabled true}}
              value: {{ required "Must provide a driver name" (printf "%s.%s.dellemc.com" .Release.Namespace .Values.customDriverName.value) }}
              {{- else }}
              value: csi-powermax.dellemc.com
              {{- end }}  
            - name: CSI_ENDPOINT
              value: /var/run/csi/csi.sock
            - name: X_CSI_MODE
              value: controller
            - name: X_CSI_DEBUG
              value: "true"
            - name: X_CSI_POWERMAX_ENDPOINT
              value: {{ required "Must provide a Unisphere HTTPS endpoint." .Values.unisphere }}
            - name: X_CSI_POWERMAX_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-creds
                  key: username
            - name: X_CSI_POWERMAX_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-creds
                  key: password
            - name: X_CSI_POWERMAX_VERSION
              value: "90"
            - name: X_CSI_POWERMAX_DEBUG
              value: {{ .Values.powerMaxDebug | default "false" | lower | quote }}
            - name: X_CSI_POWERMAX_SKIP_CERTIFICATE_VALIDATION
              value: {{ .Values.skipCertificateValidation | default "true" | lower | quote }}
            - name: X_CSI_POWERMAX_INSECURE
              value: {{ .Values.powerMaxInsecure | default "none" | lower | quote }}
            - name: X_CSI_POWERMAX_PROXY_SERVICE_NAME
            {{- if eq .Values.csireverseproxy.enabled true }}
              value: {{ .Release.Name }}-reverseproxy
            {{- else }}
              value: "none"
            {{- end }}
            - name: X_CSI_POWERMAX_PORTGROUPS
              value: {{ .Values.portGroups | toJson }}
            - name: X_CSI_K8S_CLUSTER_PREFIX
              value: {{ required "Must provide a Cluster Prefix." .Values.clusterPrefix }}
            - name: X_CSI_POWERMAX_ARRAYS
              value: {{ .Values.arrayWhitelist | default "" | toJson }}
            - name: X_CSI_GRPC_MAX_THREADS
            {{- if eq .Values.csireverseproxy.enabled true }}
              value: "50"
            {{- else }}
              value: "4"
            {{- end }}
            - name: X_CSI_TRANSPORT_PROTOCOL
              value: {{ .Values.transportProtocol | default "" }}
            - name: SSL_CERT_DIR
              value: /certs
            - name: X_CSI_IG_NODENAME_TEMPLATE
              value: {{ .Values.nodeNameTemplate | default "" }}
            - name: X_CSI_IG_MODIFY_HOSTNAME
              value: {{ .Values.modifyHostName | default "false" | lower | quote }}
          volumeMounts:
            - name: socket-dir
              mountPath: /var/run/csi
            - name: certs
              mountPath: /certs
              readOnly: true
      volumes:
        - name: socket-dir
          emptyDir:
        - name: certs
          secret:
              secretName: {{ .Release.Name }}-certs
              optional: true 
