#!/bin/sh
source ./common.bash

# Determine the nodes
MINION_NODES=$(kubectl get nodes -o wide | grep  -v -e master -e INTERNAL | awk ' { print $6; }')
MASTER_NODES=$(kubectl get nodes -o wide | awk ' /master/{ print $6; }')
echo Kubernetes master nodes: $MASTER_NODES
echo Kubernetes minion nodes: $MINION_NODES

echo Verifying the iSCSI installation.
fail=0
for node in $MINION_NODES
do
	ssh $node cat /etc/iscsi/initiatorname.iscsi
	rv=$?
	if [ $rv -ne 0 ]; then 
		echo "*******************************************************************"
		echo "Warning... Node $node does not have the iSCSI packages installed"
		echo "*******************************************************************"
		fail=1;
	 fi
	
done
if [ $fail -ne 0 ]; then echo "Warning... If you plan to use ISCSI on a particular node, then YOU MUST INSTALL THE iSCSI packages ON THAT NODE";fi

# Variables used for verification
if [ $kMajorVersion -eq 1 -a $kMinorVersion -eq 13 ]; then
# k1.13
FEATURE_GATES="CSINodeInfo CSIDriverRegistry CSIBlockVolume"
else
# above
exit 0
fi
MASTER_PROCS="/kubelet kube-apiserver kube-scheduler kube-controller-manager"
MINION_PROCS="/kubelet"
fail=0
echo "Verifying feature gates: $FEATURE_GATES"

for node in $MASTER_NODES
do
	echo ssh $node ps -ef >.ps.out
	ssh $node ps -ef >.ps.out
	for gate in $FEATURE_GATES
	do
	#echo checking $node for $gate ...
		for proc in $MASTER_PROCS
		do
		#echo proc $proc
		count=$(grep $proc .ps.out | grep -c $gate)
		#echo $node $gate $proc $count
		[ $count -ne "1" ] && { echo "node $node proc $proc gate $gate failed"; fail=1; }
		done
	done
done

for node in $MINION_NODES
do
	echo ssh $node ps -ef >.ps.out
	ssh $node ps -ef >.ps.out
	for gate in $FEATURE_GATES
	do
	#echo checking $node for $gate ...
		for proc in $MINION_PROCS
		do
		#echo proc $proc
		count=$(grep $proc .ps.out | grep -c $gate)
		#echo $node $gate $proc $count
		[ $count -ne "1" ] && { echo "node $node proc $proc gate $gate failed"; fail=1; }
		done
	done
done

exit $fail
