#/bin/bash
# define the namespace for the driver
NS="powermax"

source common.bash

rollingUpdatePresent=$(kubectl get statefulset -n $NS -o yaml | grep -c "RollingUpdate")
if [ $rollingUpdatePresent -ne 1 ]; then
	echo "The upgrade script cannot be used until you have installed the update to get the StatefulSet RollingUpdate upgradeStrategy"
	echo "Please use uninstall.powermax followed by install.powermax instead"
	exit 2
fi

# Make sure the powermax-creds has already been established
kubectl get secrets -n "$NS" | grep powermax-creds --quiet
if [ $? -ne 0 ];
    then echo "*** YOU MUST PROVIDE Unisphere credentials in a Kubernetes secret- see secret.yaml template ***"
    exit 2
fi

# Check if powermax-certs exists. If not, then create it
kubectl get secrets -n "$NS" | grep powermax-certs --quiet
if [ $? -ne 0 ];
    then echo "*** Couldn't find powermax-certs. Creating an empty secret. Delete it and re-create it if you want to validate unisphere certificates ***"
    kubectl create -f ./emptysecret.yaml
fi

# Define CRDs for k8s 1.13
if [ $kMinorVersion == "13" ];
then
	kubectl get customresourcedefinitions | grep csidrivers --quiet
	if [ $? -ne 0 ];
	    then echo "installing csidriver CRD"; kubectl create -f csidriver.yaml
	fi
	kubectl get customresourcedefinitions | grep nodeinfo --quiet
	if [ $? -ne 0 ];
	    then echo "installing nodeinfo CRD"; kubectl create -f nodeinfo.yaml
	fi
fi

echo helm upgrade --values myvalues.yaml --values csi-powermax/k8s-${kMajorVersion}.${kMinorVersion}-values.yaml --namespace "$NS" powermax ./csi-powermax
helm upgrade --values myvalues.yaml --values csi-powermax/k8s-${kMajorVersion}.${kMinorVersion}-values.yaml  --namespace "$NS" powermax ./csi-powermax
waitOnRunning
echo "CSIDrivers:"
kubectl get csidrivers
if [ $kMinorVersion == "13" ];
then
	echo "CSINodeInfos:"
	kubectl get csinodeinfos
fi
echo "StorageClasses:"
kubectl get storageclass

